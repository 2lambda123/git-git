but-cherry-pick(1)
==================

NAME
----
but-cherry-pick - Apply the changes introduced by some existing cummits

SYNOPSIS
--------
[verse]
'but cherry-pick' [--edit] [-n] [-m <parent-number>] [-s] [-x] [--ff]
		  [-S[<keyid>]] <cummit>...
'but cherry-pick' (--continue | --skip | --abort | --quit)

DESCRIPTION
-----------

Given one or more existing cummits, apply the change each one
introduces, recording a new cummit for each.  This requires your
working tree to be clean (no modifications from the HEAD cummit).

When it is not obvious how to apply a change, the following
happens:

1. The current branch and `HEAD` pointer stay at the last cummit
   successfully made.
2. The `CHERRY_PICK_HEAD` ref is set to point at the cummit that
   introduced the change that is difficult to apply.
3. Paths in which the change applied cleanly are updated both
   in the index file and in your working tree.
4. For conflicting paths, the index file records up to three
   versions, as described in the "TRUE MERGE" section of
   linkbut:but-merge[1].  The working tree files will include
   a description of the conflict bracketed by the usual
   conflict markers `<<<<<<<` and `>>>>>>>`.
5. No other modifications are made.

See linkbut:but-merge[1] for some hints on resolving such
conflicts.

OPTIONS
-------
<cummit>...::
	cummits to cherry-pick.
	For a more complete list of ways to spell cummits, see
	linkbut:butrevisions[7].
	Sets of cummits can be passed but no traversal is done by
	default, as if the `--no-walk` option was specified, see
	linkbut:but-rev-list[1]. Note that specifying a range will
	feed all <cummit>... arguments to a single revision walk
	(see a later example that uses 'maint master..next').

-e::
--edit::
	With this option, 'but cherry-pick' will let you edit the cummit
	message prior to cummitting.

--cleanup=<mode>::
	This option determines how the cummit message will be cleaned up before
	being passed on to the cummit machinery. See linkbut:but-cummit[1] for more
	details. In particular, if the '<mode>' is given a value of `scissors`,
	scissors will be appended to `MERGE_MSG` before being passed on in the case
	of a conflict.

-x::
	When recording the cummit, append a line that says
	"(cherry picked from cummit ...)" to the original cummit
	message in order to indicate which cummit this change was
	cherry-picked from.  This is done only for cherry
	picks without conflicts.  Do not use this option if
	you are cherry-picking from your private branch because
	the information is useless to the recipient.  If on the
	other hand you are cherry-picking between two publicly
	visible branches (e.g. backporting a fix to a
	maintenance branch for an older release from a
	development branch), adding this information can be
	useful.

-r::
	It used to be that the command defaulted to do `-x`
	described above, and `-r` was to disable it.  Now the
	default is not to do `-x` so this option is a no-op.

-m <parent-number>::
--mainline <parent-number>::
	Usually you cannot cherry-pick a merge because you do not know which
	side of the merge should be considered the mainline.  This
	option specifies the parent number (starting from 1) of
	the mainline and allows cherry-pick to replay the change
	relative to the specified parent.

-n::
--no-cummit::
	Usually the command automatically creates a sequence of cummits.
	This flag applies the changes necessary to cherry-pick
	each named cummit to your working tree and the index,
	without making any cummit.  In addition, when this
	option is used, your index does not have to match the
	HEAD cummit.  The cherry-pick is done against the
	beginning state of your index.
+
This is useful when cherry-picking more than one cummits'
effect to your index in a row.

-s::
--signoff::
	Add a `Signed-off-by` trailer at the end of the cummit message.
	See the signoff option in linkbut:but-cummit[1] for more information.

-S[<keyid>]::
--gpg-sign[=<keyid>]::
--no-gpg-sign::
	GPG-sign cummits. The `keyid` argument is optional and
	defaults to the cummitter identity; if specified, it must be
	stuck to the option without a space. `--no-gpg-sign` is useful to
	countermand both `cummit.gpgSign` configuration variable, and
	earlier `--gpg-sign`.

--ff::
	If the current HEAD is the same as the parent of the
	cherry-pick'ed cummit, then a fast forward to this cummit will
	be performed.

--allow-empty::
	By default, cherry-picking an empty cummit will fail,
	indicating that an explicit invocation of `but cummit
	--allow-empty` is required. This option overrides that
	behavior, allowing empty cummits to be preserved automatically
	in a cherry-pick. Note that when "--ff" is in effect, empty
	cummits that meet the "fast-forward" requirement will be kept
	even without this option.  Note also, that use of this option only
	keeps cummits that were initially empty (i.e. the cummit recorded the
	same tree as its parent).  cummits which are made empty due to a
	previous cummit are dropped.  To force the inclusion of those cummits
	use `--keep-redundant-cummits`.

--allow-empty-message::
	By default, cherry-picking a cummit with an empty message will fail.
	This option overrides that behavior, allowing cummits with empty
	messages to be cherry picked.

--keep-redundant-cummits::
	If a cummit being cherry picked duplicates a cummit already in the
	current history, it will become empty.  By default these
	redundant cummits cause `cherry-pick` to stop so the user can
	examine the cummit. This option overrides that behavior and
	creates an empty cummit object.  Implies `--allow-empty`.

--strategy=<strategy>::
	Use the given merge strategy.  Should only be used once.
	See the MERGE STRATEGIES section in linkbut:but-merge[1]
	for details.

-X<option>::
--strategy-option=<option>::
	Pass the merge strategy-specific option through to the
	merge strategy.  See linkbut:but-merge[1] for details.

--rerere-autoupdate::
--no-rerere-autoupdate::
	Allow the rerere mechanism to update the index with the
	result of auto-conflict resolution if possible.

SEQUENCER SUBCOMMANDS
---------------------
include::sequencer.txt[]

EXAMPLES
--------
`but cherry-pick master`::

	Apply the change introduced by the cummit at the tip of the
	master branch and create a new cummit with this change.

`but cherry-pick ..master`::
`but cherry-pick ^HEAD master`::

	Apply the changes introduced by all cummits that are ancestors
	of master but not of HEAD to produce new cummits.

`but cherry-pick maint next ^master`::
`but cherry-pick maint master..next`::

	Apply the changes introduced by all cummits that are
	ancestors of maint or next, but not master or any of its
	ancestors.  Note that the latter does not mean `maint` and
	everything between `master` and `next`; specifically,
	`maint` will not be used if it is included in `master`.

`but cherry-pick master~4 master~2`::

	Apply the changes introduced by the fifth and third last
	cummits pointed to by master and create 2 new cummits with
	these changes.

`but cherry-pick -n master~1 next`::

	Apply to the working tree and the index the changes introduced
	by the second last cummit pointed to by master and by the last
	cummit pointed to by next, but do not create any cummit with
	these changes.

`but cherry-pick --ff ..next`::

	If history is linear and HEAD is an ancestor of next, update
	the working tree and advance the HEAD pointer to match next.
	Otherwise, apply the changes introduced by those cummits that
	are in next but not HEAD to the current branch, creating a new
	cummit for each new change.

`but rev-list --reverse master -- README | but cherry-pick -n --stdin`::

	Apply the changes introduced by all cummits on the master
	branch that touched README to the working tree and index,
	so the result can be inspected and made into a single new
	cummit if suitable.

The following sequence attempts to backport a patch, bails out because
the code the patch applies to has changed too much, and then tries
again, this time exercising more care about matching up context lines.

------------
$ but cherry-pick topic^             <1>
$ but diff                           <2>
$ but reset --merge ORIG_HEAD        <3>
$ but cherry-pick -Xpatience topic^  <4>
------------
<1> apply the change that would be shown by `but show topic^`.
    In this example, the patch does not apply cleanly, so
    information about the conflict is written to the index and
    working tree and no new cummit results.
<2> summarize changes to be reconciled
<3> cancel the cherry-pick.  In other words, return to the
    pre-cherry-pick state, preserving any local modifications
    you had in the working tree.
<4> try to apply the change introduced by `topic^` again,
    spending extra time to avoid mistakes based on incorrectly
    matching context lines.

SEE ALSO
--------
linkbut:but-revert[1]

BUT
---
Part of the linkbut:but[1] suite
