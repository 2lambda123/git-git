but-cummit(1)
=============

NAME
----
but-cummit - Record changes to the repository

SYNOPSIS
--------
[verse]
'but cummit' [-a | --interactive | --patch] [-s] [-v] [-u<mode>] [--amend]
	   [--dry-run] [(-c | -C | --squash) <cummit> | --fixup [(amend|reword):]<cummit>)]
	   [-F <file> | -m <msg>] [--reset-author] [--allow-empty]
	   [--allow-empty-message] [--no-verify] [-e] [--author=<author>]
	   [--date=<date>] [--cleanup=<mode>] [--[no-]status]
	   [-i | -o] [--pathspec-from-file=<file> [--pathspec-file-nul]]
	   [(--trailer <token>[(=|:)<value>])...] [-S[<keyid>]]
	   [--] [<pathspec>...]

DESCRIPTION
-----------
Create a new cummit containing the current contents of the index and
the given log message describing the changes. The new cummit is a
direct child of HEAD, usually the tip of the current branch, and the
branch is updated to point to it (unless no branch is associated with
the working tree, in which case HEAD is "detached" as described in
linkbut:but-checkout[1]).

The content to be cummitted can be specified in several ways:

1. by using linkbut:but-add[1] to incrementally "add" changes to the
   index before using the 'cummit' command (Note: even modified files
   must be "added");

2. by using linkbut:but-rm[1] to remove files from the working tree
   and the index, again before using the 'cummit' command;

3. by listing files as arguments to the 'cummit' command
   (without --interactive or --patch switch), in which
   case the cummit will ignore changes staged in the index, and instead
   record the current content of the listed files (which must already
   be known to Git);

4. by using the -a switch with the 'cummit' command to automatically
   "add" changes from all known files (i.e. all files that are already
   listed in the index) and to automatically "rm" files in the index
   that have been removed from the working tree, and then perform the
   actual cummit;

5. by using the --interactive or --patch switches with the 'cummit' command
   to decide one by one which files or hunks should be part of the cummit
   in addition to contents in the index,
   before finalizing the operation. See the ``Interactive Mode'' section of
   linkbut:but-add[1] to learn how to operate these modes.

The `--dry-run` option can be used to obtain a
summary of what is included by any of the above for the next
cummit by giving the same set of parameters (options and paths).

If you make a cummit and then find a mistake immediately after
that, you can recover from it with 'but reset'.

:but-cummit: 1

OPTIONS
-------
-a::
--all::
	Tell the command to automatically stage files that have
	been modified and deleted, but new files you have not
	told Git about are not affected.

-p::
--patch::
	Use the interactive patch selection interface to choose
	which changes to cummit. See linkbut:but-add[1] for
	details.

-C <cummit>::
--reuse-message=<cummit>::
	Take an existing cummit object, and reuse the log message
	and the authorship information (including the timestamp)
	when creating the cummit.

-c <cummit>::
--reedit-message=<cummit>::
	Like '-C', but with `-c` the editor is invoked, so that
	the user can further edit the cummit message.

--fixup=[(amend|reword):]<cummit>::
	Create a new cummit which "fixes up" `<cummit>` when applied with
	`but rebase --autosquash`. Plain `--fixup=<cummit>` creates a
	"fixup!" cummit which changes the content of `<cummit>` but leaves
	its log message untouched. `--fixup=amend:<cummit>` is similar but
	creates an "amend!" cummit which also replaces the log message of
	`<cummit>` with the log message of the "amend!" cummit.
	`--fixup=reword:<cummit>` creates an "amend!" cummit which
	replaces the log message of `<cummit>` with its own log message
	but makes no changes to the content of `<cummit>`.
+
The cummit created by plain `--fixup=<cummit>` has a subject
composed of "fixup!" followed by the subject line from <cummit>,
and is recognized specially by `but rebase --autosquash`. The `-m`
option may be used to supplement the log message of the created
cummit, but the additional commentary will be thrown away once the
"fixup!" cummit is squashed into `<cummit>` by
`but rebase --autosquash`.
+
The cummit created by `--fixup=amend:<cummit>` is similar but its
subject is instead prefixed with "amend!". The log message of
<cummit> is copied into the log message of the "amend!" cummit and
opened in an editor so it can be refined. When `but rebase
--autosquash` squashes the "amend!" cummit into `<cummit>`, the
log message of `<cummit>` is replaced by the refined log message
from the "amend!" cummit. It is an error for the "amend!" cummit's
log message to be empty unless `--allow-empty-message` is
specified.
+
`--fixup=reword:<cummit>` is shorthand for `--fixup=amend:<cummit>
--only`. It creates an "amend!" cummit with only a log message
(ignoring any changes staged in the index). When squashed by `but
rebase --autosquash`, it replaces the log message of `<cummit>`
without making any other changes.
+
Neither "fixup!" nor "amend!" cummits change authorship of
`<cummit>` when applied by `but rebase --autosquash`.
See linkbut:but-rebase[1] for details.

--squash=<cummit>::
	Construct a cummit message for use with `rebase --autosquash`.
	The cummit message subject line is taken from the specified
	cummit with a prefix of "squash! ".  Can be used with additional
	cummit message options (`-m`/`-c`/`-C`/`-F`). See
	linkbut:but-rebase[1] for details.

--reset-author::
	When used with -C/-c/--amend options, or when cummitting after a
	conflicting cherry-pick, declare that the authorship of the
	resulting cummit now belongs to the cummitter. This also renews
	the author timestamp.

--short::
	When doing a dry-run, give the output in the short-format. See
	linkbut:but-status[1] for details. Implies `--dry-run`.

--branch::
	Show the branch and tracking info even in short-format.

--porcelain::
	When doing a dry-run, give the output in a porcelain-ready
	format. See linkbut:but-status[1] for details. Implies
	`--dry-run`.

--long::
	When doing a dry-run, give the output in the long-format.
	Implies `--dry-run`.

-z::
--null::
	When showing `short` or `porcelain` status output, print the
	filename verbatim and terminate the entries with NUL, instead of LF.
	If no format is given, implies the `--porcelain` output format.
	Without the `-z` option, filenames with "unusual" characters are
	quoted as explained for the configuration variable `core.quotePath`
	(see linkbut:but-config[1]).

-F <file>::
--file=<file>::
	Take the cummit message from the given file.  Use '-' to
	read the message from the standard input.

--author=<author>::
	Override the cummit author. Specify an explicit author using the
	standard `A U Thor <author@example.com>` format. Otherwise <author>
	is assumed to be a pattern and is used to search for an existing
	cummit by that author (i.e. rev-list --all -i --author=<author>);
	the cummit author is then copied from the first such cummit found.

--date=<date>::
	Override the author date used in the cummit.

-m <msg>::
--message=<msg>::
	Use the given <msg> as the cummit message.
	If multiple `-m` options are given, their values are
	concatenated as separate paragraphs.
+
The `-m` option is mutually exclusive with `-c`, `-C`, and `-F`.

-t <file>::
--template=<file>::
	When editing the cummit message, start the editor with the
	contents in the given file.  The `cummit.template` configuration
	variable is often used to give this option implicitly to the
	command.  This mechanism can be used by projects that want to
	guide participants with some hints on what to write in the message
	in what order.  If the user exits the editor without editing the
	message, the cummit is aborted.  This has no effect when a message
	is given by other means, e.g. with the `-m` or `-F` options.

include::signoff-option.txt[]

--trailer <token>[(=|:)<value>]::
	Specify a (<token>, <value>) pair that should be applied as a
	trailer. (e.g. `but cummit --trailer "Signed-off-by:C O Mitter \
	<cummitter@example.com>" --trailer "Helped-by:C O Mitter \
	<cummitter@example.com>"` will add the "Signed-off-by" trailer
	and the "Helped-by" trailer to the cummit message.)
	The `trailer.*` configuration variables
	(linkbut:but-interpret-trailers[1]) can be used to define if
	a duplicated trailer is omitted, where in the run of trailers
	each trailer would appear, and other details.

-n::
--[no-]verify::
	By default, the pre-cummit and cummit-msg hooks are run.
	When any of `--no-verify` or `-n` is given, these are bypassed.
	See also linkbut:buthooks[5].

--allow-empty::
	Usually recording a cummit that has the exact same tree as its
	sole parent cummit is a mistake, and the command prevents you
	from making such a cummit.  This option bypasses the safety, and
	is primarily for use by foreign SCM interface scripts.

--allow-empty-message::
       Like --allow-empty this command is primarily for use by foreign
       SCM interface scripts. It allows you to create a cummit with an
       empty cummit message without using plumbing commands like
       linkbut:but-cummit-tree[1].

--cleanup=<mode>::
	This option determines how the supplied cummit message should be
	cleaned up before cummitting.  The '<mode>' can be `strip`,
	`whitespace`, `verbatim`, `scissors` or `default`.
+
--
strip::
	Strip leading and trailing empty lines, trailing whitespace,
	commentary and collapse consecutive empty lines.
whitespace::
	Same as `strip` except #commentary is not removed.
verbatim::
	Do not change the message at all.
scissors::
	Same as `whitespace` except that everything from (and including)
	the line found below is truncated, if the message is to be edited.
	"`#`" can be customized with core.commentChar.

		# ------------------------ >8 ------------------------

default::
	Same as `strip` if the message is to be edited.
	Otherwise `whitespace`.
--
+
The default can be changed by the `cummit.cleanup` configuration
variable (see linkbut:but-config[1]).

-e::
--edit::
	The message taken from file with `-F`, command line with
	`-m`, and from cummit object with `-C` are usually used as
	the cummit log message unmodified. This option lets you
	further edit the message taken from these sources.

--no-edit::
	Use the selected cummit message without launching an editor.
	For example, `but cummit --amend --no-edit` amends a cummit
	without changing its cummit message.

--amend::
	Replace the tip of the current branch by creating a new
	cummit. The recorded tree is prepared as usual (including
	the effect of the `-i` and `-o` options and explicit
	pathspec), and the message from the original cummit is used
	as the starting point, instead of an empty message, when no
	other message is specified from the command line via options
	such as `-m`, `-F`, `-c`, etc.  The new commit has the same
	parents and author as the current one (the `--reset-author`
	option can countermand this).
+
--
It is a rough equivalent for:
------
	$ but reset --soft HEAD^
	$ ... do something else to come up with the right tree ...
	$ but cummit -c ORIG_HEAD

------
but can be used to amend a merge cummit.
--
+
You should understand the implications of rewriting history if you
amend a cummit that has already been published.  (See the "RECOVERING
FROM UPSTREAM REBASE" section in linkbut:but-rebase[1].)

--no-post-rewrite::
	Bypass the post-rewrite hook.

-i::
--include::
	Before making a cummit out of staged contents so far,
	stage the contents of paths given on the command line
	as well.  This is usually not what you want unless you
	are concluding a conflicted merge.

-o::
--only::
	Make a cummit by taking the updated working tree contents
	of the paths specified on the
	command line, disregarding any contents that have been
	staged for other paths. This is the default mode of operation of
	'but cummit' if any paths are given on the command line,
	in which case this option can be omitted.
	If this option is specified together with `--amend`, then
	no paths need to be specified, which can be used to amend
	the last cummit without cummitting changes that have
	already been staged. If used together with `--allow-empty`
	paths are also not required, and an empty cummit will be created.

--pathspec-from-file=<file>::
	Pathspec is passed in `<file>` instead of commandline args. If
	`<file>` is exactly `-` then standard input is used. Pathspec
	elements are separated by LF or CR/LF. Pathspec elements can be
	quoted as explained for the configuration variable `core.quotePath`
	(see linkbut:but-config[1]). See also `--pathspec-file-nul` and
	global `--literal-pathspecs`.

--pathspec-file-nul::
	Only meaningful with `--pathspec-from-file`. Pathspec elements are
	separated with NUL character and all other characters are taken
	literally (including newlines and quotes).

-u[<mode>]::
--untracked-files[=<mode>]::
	Show untracked files.
+
--
The mode parameter is optional (defaults to 'all'), and is used to
specify the handling of untracked files; when -u is not used, the
default is 'normal', i.e. show untracked files and directories.

The possible options are:

	- 'no'     - Show no untracked files
	- 'normal' - Shows untracked files and directories
	- 'all'    - Also shows individual files in untracked directories.

The default can be changed using the status.showUntrackedFiles
configuration variable documented in linkbut:but-config[1].
--

-v::
--verbose::
	Show unified diff between the HEAD cummit and what
	would be cummitted at the bottom of the cummit message
	template to help the user describe the cummit by reminding
	what changes the commit has.
	Note that this diff output doesn't have its
	lines prefixed with '#'. This diff will not be a part
	of the cummit message. See the `cummit.verbose` configuration
	variable in linkbut:but-config[1].
+
If specified twice, show in addition the unified diff between
what would be cummitted and the worktree files, i.e. the unstaged
changes to tracked files.

-q::
--quiet::
	Suppress cummit summary message.

--dry-run::
	Do not create a cummit, but show a list of paths that are
	to be cummitted, paths with local changes that will be left
	uncummitted and paths that are untracked.

--status::
	Include the output of linkbut:but-status[1] in the cummit
	message template when using an editor to prepare the cummit
	message.  Defaults to on, but can be used to override
	configuration variable cummit.status.

--no-status::
	Do not include the output of linkbut:but-status[1] in the
	cummit message template when using an editor to prepare the
	default cummit message.

-S[<keyid>]::
--gpg-sign[=<keyid>]::
--no-gpg-sign::
	GPG-sign cummits. The `keyid` argument is optional and
	defaults to the cummitter identity; if specified, it must be
	stuck to the option without a space. `--no-gpg-sign` is useful to
	countermand both `cummit.gpgSign` configuration variable, and
	earlier `--gpg-sign`.

\--::
	Do not interpret any more arguments as options.

<pathspec>...::
	When pathspec is given on the command line, cummit the contents of
	the files that match the pathspec without recording the changes
	already added to the index. The contents of these files are also
	staged for the next cummit on top of what have been staged before.
+
For more details, see the 'pathspec' entry in linkbut:butglossary[7].

EXAMPLES
--------
When recording your own work, the contents of modified files in
your working tree are temporarily stored to a staging area
called the "index" with 'but add'.  A file can be
reverted back, only in the index but not in the working tree,
to that of the last cummit with `but restore --staged <file>`,
which effectively reverts 'but add' and prevents the changes to
this file from participating in the next cummit.  After building
the state to be cummitted incrementally with these commands,
`but cummit` (without any pathname parameter) is used to record what
has been staged so far.  This is the most basic form of the
command.  An example:

------------
$ edit hello.c
$ but rm goodbye.c
$ but add hello.c
$ but cummit
------------

Instead of staging files after each individual change, you can
tell `but cummit` to notice the changes to the files whose
contents are tracked in
your working tree and do corresponding `but add` and `but rm`
for you.  That is, this example does the same as the earlier
example if there is no other change in your working tree:

------------
$ edit hello.c
$ rm goodbye.c
$ but cummit -a
------------

The command `but cummit -a` first looks at your working tree,
notices that you have modified hello.c and removed goodbye.c,
and performs necessary `but add` and `but rm` for you.

After staging changes to many files, you can alter the order the
changes are recorded in, by giving pathnames to `but cummit`.
When pathnames are given, the command makes a cummit that
only records the changes made to the named paths:

------------
$ edit hello.c hello.h
$ but add hello.c hello.h
$ edit Makefile
$ but cummit Makefile
------------

This makes a cummit that records the modification to `Makefile`.
The changes staged for `hello.c` and `hello.h` are not included
in the resulting cummit.  However, their changes are not lost --
they are still staged and merely held back.  After the above
sequence, if you do:

------------
$ but cummit
------------

this second cummit would record the changes to `hello.c` and
`hello.h` as expected.

After a merge (initiated by 'but merge' or 'but pull') stops
because of conflicts, cleanly merged
paths are already staged to be cummitted for you, and paths that
conflicted are left in unmerged state.  You would have to first
check which paths are conflicting with 'but status'
and after fixing them manually in your working tree, you would
stage the result as usual with 'but add':

------------
$ but status | grep unmerged
unmerged: hello.c
$ edit hello.c
$ but add hello.c
------------

After resolving conflicts and staging the result, `but ls-files -u`
would stop mentioning the conflicted path.  When you are done,
run `but cummit` to finally record the merge:

------------
$ but cummit
------------

As with the case to record your own changes, you can use `-a`
option to save typing.  One difference is that during a merge
resolution, you cannot use `but cummit` with pathnames to
alter the order the changes are cummitted, because the merge
should be recorded as a single cummit.  In fact, the command
refuses to run when given pathnames (but see `-i` option).

cummit INFORMATION
------------------

Author and cummitter information is taken from the following environment
variables, if set:

	GIT_AUTHOR_NAME
	GIT_AUTHOR_EMAIL
	GIT_AUTHOR_DATE
	GIT_CUMMITTER_NAME
	GIT_CUMMITTER_EMAIL
	GIT_CUMMITTER_DATE

(nb "<", ">" and "\n"s are stripped)

The author and cummitter names are by convention some form of a personal name
(that is, the name by which other humans refer to you), although Git does not
enforce or require any particular form. Arbitrary Unicode may be used, subject
to the constraints listed above. This name has no effect on authentication; for
that, see the `credential.username` variable in linkbut:but-config[1].

In case (some of) these environment variables are not set, the information
is taken from the configuration items `user.name` and `user.email`, or, if not
present, the environment variable EMAIL, or, if that is not set,
system user name and the hostname used for outgoing mail (taken
from `/etc/mailname` and falling back to the fully qualified hostname when
that file does not exist).

The `author.name` and `cummitter.name` and their corresponding email options
override `user.name` and `user.email` if set and are overridden themselves by
the environment variables.

The typical usage is to set just the `user.name` and `user.email` variables;
the other options are provided for more complex use cases.

:but-cummit: 1
include::date-formats.txt[]

DISCUSSION
----------

Though not required, it's a good idea to begin the cummit message
with a single short (less than 50 character) line summarizing the
change, followed by a blank line and then a more thorough description.
The text up to the first blank line in a cummit message is treated
as the cummit title, and that title is used throughout Git.
For example, linkbut:but-format-patch[1] turns a cummit into email, and it uses
the title on the Subject line and the rest of the cummit in the body.

include::i18n.txt[]

ENVIRONMENT AND CONFIGURATION VARIABLES
---------------------------------------
The editor used to edit the cummit log message will be chosen from the
`GIT_EDITOR` environment variable, the core.editor configuration variable, the
`VISUAL` environment variable, or the `EDITOR` environment variable (in that
order).  See linkbut:but-var[1] for details.

HOOKS
-----
This command can run `cummit-msg`, `prepare-cummit-msg`, `pre-cummit`,
`post-cummit` and `post-rewrite` hooks.  See linkbut:buthooks[5] for more
information.

FILES
-----

`$GIT_DIR/CUMMIT_EDITMSG`::
	This file contains the cummit message of a cummit in progress.
	If `but cummit` exits due to an error before creating a cummit,
	any cummit message that has been provided by the user (e.g., in
	an editor session) will be available in this file, but will be
	overwritten by the next invocation of `but cummit`.

SEE ALSO
--------
linkbut:but-add[1],
linkbut:but-rm[1],
linkbut:but-mv[1],
linkbut:but-merge[1],
linkbut:but-cummit-tree[1]

GIT
---
Part of the linkbut:but[1] suite
