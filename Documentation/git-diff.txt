but-diff(1)
===========

NAME
----
but-diff - Show changes between cummits, cummit and working tree, etc


SYNOPSIS
--------
[verse]
'but diff' [<options>] [<cummit>] [--] [<path>...]
'but diff' [<options>] --cached [--merge-base] [<cummit>] [--] [<path>...]
'but diff' [<options>] [--merge-base] <cummit> [<cummit>...] <cummit> [--] [<path>...]
'but diff' [<options>] <cummit>...<cummit> [--] [<path>...]
'but diff' [<options>] <blob> <blob>
'but diff' [<options>] --no-index [--] <path> <path>

DESCRIPTION
-----------
Show changes between the working tree and the index or a tree, changes
between the index and a tree, changes between two trees, changes resulting
from a merge, changes between two blob objects, or changes between two
files on disk.

'but diff' [<options>] [--] [<path>...]::

	This form is to view the changes you made relative to
	the index (staging area for the next cummit).  In other
	words, the differences are what you _could_ tell Git to
	further add to the index but you still haven't.  You can
	stage these changes by using linkbut:but-add[1].

'but diff' [<options>] --no-index [--] <path> <path>::

	This form is to compare the given two paths on the
	filesystem.  You can omit the `--no-index` option when
	running the command in a working tree controlled by Git and
	at least one of the paths points outside the working tree,
	or when running the command outside a working tree
	controlled by Git. This form implies `--exit-code`.

'but diff' [<options>] --cached [--merge-base] [<cummit>] [--] [<path>...]::

	This form is to view the changes you staged for the next
	cummit relative to the named <cummit>.  Typically you
	would want comparison with the latest cummit, so if you
	do not give <cummit>, it defaults to HEAD.
	If HEAD does not exist (e.g. unborn branches) and
	<cummit> is not given, it shows all staged changes.
	--staged is a synonym of --cached.
+
If --merge-base is given, instead of using <cummit>, use the merge base
of <cummit> and HEAD.  `but diff --cached --merge-base A` is equivalent to
`but diff --cached $(but merge-base A HEAD)`.

'but diff' [<options>] [--merge-base] <cummit> [--] [<path>...]::

	This form is to view the changes you have in your
	working tree relative to the named <cummit>.  You can
	use HEAD to compare it with the latest cummit, or a
	branch name to compare with the tip of a different
	branch.
+
If --merge-base is given, instead of using <cummit>, use the merge base
of <cummit> and HEAD.  `but diff --merge-base A` is equivalent to
`but diff $(but merge-base A HEAD)`.

'but diff' [<options>] [--merge-base] <cummit> <cummit> [--] [<path>...]::

	This is to view the changes between two arbitrary
	<cummit>.
+
If --merge-base is given, use the merge base of the two cummits for the
"before" side.  `but diff --merge-base A B` is equivalent to
`but diff $(but merge-base A B) B`.

'but diff' [<options>] <cummit> <cummit>... <cummit> [--] [<path>...]::

	This form is to view the results of a merge cummit.  The first
	listed <cummit> must be the merge itself; the remaining two or
	more cummits should be its parents.  A convenient way to produce
	the desired set of revisions is to use the `^@` suffix.
	For instance, if `master` names a merge cummit, `but diff master
	master^@` gives the same combined diff as `but show master`.

'but diff' [<options>] <cummit>..<cummit> [--] [<path>...]::

	This is synonymous to the earlier form (without the `..`) for
	viewing the changes between two arbitrary <cummit>.  If <cummit> on
	one side is omitted, it will have the same effect as
	using HEAD instead.

'but diff' [<options>] <cummit>\...<cummit> [--] [<path>...]::

	This form is to view the changes on the branch containing
	and up to the second <cummit>, starting at a common ancestor
	of both <cummit>.  `but diff A...B` is equivalent to
	`but diff $(but merge-base A B) B`.  You can omit any one
	of <cummit>, which has the same effect as using HEAD instead.

Just in case you are doing something exotic, it should be
noted that all of the <cummit> in the above description, except
in the `--merge-base` case and in the last two forms that use `..`
notations, can be any <tree>.

For a more complete list of ways to spell <cummit>, see
"SPECIFYING REVISIONS" section in linkbut:butrevisions[7].
However, "diff" is about comparing two _endpoints_, not ranges,
and the range notations (`<cummit>..<cummit>` and
`<cummit>...<cummit>`) do not mean a range as defined in the
"SPECIFYING RANGES" section in linkbut:butrevisions[7].

'but diff' [<options>] <blob> <blob>::

	This form is to view the differences between the raw
	contents of two blob objects.

OPTIONS
-------
:but-diff: 1
include::diff-options.txt[]

-1 --base::
-2 --ours::
-3 --theirs::
	Compare the working tree with the "base" version (stage #1),
	"our branch" (stage #2) or "their branch" (stage #3).  The
	index contains these stages only for unmerged entries i.e.
	while resolving conflicts.  See linkbut:but-read-tree[1]
	section "3-Way Merge" for detailed information.

-0::
	Omit diff output for unmerged entries and just show
	"Unmerged".  Can be used only when comparing the working tree
	with the index.

<path>...::
	The <paths> parameters, when given, are used to limit
	the diff to the named paths (you can give directory
	names and get diff for all files under them).


include::diff-format.txt[]

EXAMPLES
--------

Various ways to check your working tree::
+
------------
$ but diff            <1>
$ but diff --cached   <2>
$ but diff HEAD       <3>
------------
+
<1> Changes in the working tree not yet staged for the next cummit.
<2> Changes between the index and your last cummit; what you
    would be cummitting if you run `but cummit` without `-a` option.
<3> Changes in the working tree since your last cummit; what you
    would be cummitting if you run `but cummit -a`

Comparing with arbitrary cummits::
+
------------
$ but diff test            <1>
$ but diff HEAD -- ./test  <2>
$ but diff HEAD^ HEAD      <3>
------------
+
<1> Instead of using the tip of the current branch, compare with the
    tip of "test" branch.
<2> Instead of comparing with the tip of "test" branch, compare with
    the tip of the current branch, but limit the comparison to the
    file "test".
<3> Compare the version before the last cummit and the last cummit.

Comparing branches::
+
------------
$ but diff topic master    <1>
$ but diff topic..master   <2>
$ but diff topic...master  <3>
------------
+
<1> Changes between the tips of the topic and the master branches.
<2> Same as above.
<3> Changes that occurred on the master branch since when the topic
    branch was started off it.

Limiting the diff output::
+
------------
$ but diff --diff-filter=MRC            <1>
$ but diff --name-status                <2>
$ but diff arch/i386 include/asm-i386   <3>
------------
+
<1> Show only modification, rename, and copy, but not addition
    or deletion.
<2> Show only names and the nature of change, but not actual
    diff output.
<3> Limit diff output to named subtrees.

Munging the diff output::
+
------------
$ but diff --find-copies-harder -B -C  <1>
$ but diff -R                          <2>
------------
+
<1> Spend extra cycles to find renames, copies and complete
    rewrites (very expensive).
<2> Output diff in reverse.

SEE ALSO
--------
diff(1),
linkbut:but-difftool[1],
linkbut:but-log[1],
linkbut:butdiffcore[7],
linkbut:but-format-patch[1],
linkbut:but-apply[1],
linkbut:but-show[1]

GIT
---
Part of the linkbut:but[1] suite
