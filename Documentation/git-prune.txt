but-prune(1)
============

NAME
----
but-prune - Prune all unreachable objects from the object database


SYNOPSIS
--------
[verse]
'but prune' [-n] [-v] [--progress] [--expire <time>] [--] [<head>...]

DESCRIPTION
-----------

NOTE: In most cases, users should run 'but gc', which calls
'but prune'. See the section "NOTES", below.

This runs 'but fsck --unreachable' using all the refs
available in `refs/`, optionally with additional set of
objects specified on the command line, and prunes all unpacked
objects unreachable from any of these head objects from the object database.
In addition, it
prunes the unpacked objects that are also found in packs by
running 'but prune-packed'.
It also removes entries from .but/shallow that are not reachable by
any ref.

Note that unreachable, packed objects will remain.  If this is
not desired, see linkbut:but-repack[1].

OPTIONS
-------

-n::
--dry-run::
	Do not remove anything; just report what it would
	remove.

-v::
--verbose::
	Report all removed objects.

--progress::
	Show progress.

--expire <time>::
	Only expire loose objects older than <time>.

\--::
	Do not interpret any more arguments as options.

<head>...::
	In addition to objects
	reachable from any of our references, keep objects
	reachable from listed <head>s.

EXAMPLES
--------

To prune objects not used by your repository or another that
borrows from your repository via its
`.but/objects/info/alternates`:

------------
$ but prune $(cd ../another && but rev-parse --all)
------------

NOTES
-----

In most cases, users will not need to call 'but prune' directly, but
should instead call 'but gc', which handles pruning along with
many other housekeeping tasks.

For a description of which objects are considered for pruning, see
'but fsck''s --unreachable option.

SEE ALSO
--------

linkbut:but-fsck[1],
linkbut:but-gc[1],
linkbut:but-reflog[1]

GIT
---
Part of the linkbut:but[1] suite
