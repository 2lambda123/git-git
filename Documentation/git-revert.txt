but-revert(1)
=============

NAME
----
but-revert - Revert some existing cummits

SYNOPSIS
--------
[verse]
'but revert' [--[no-]edit] [-n] [-m parent-number] [-s] [-S[<keyid>]] <cummit>...
'but revert' (--continue | --skip | --abort | --quit)

DESCRIPTION
-----------

Given one or more existing cummits, revert the changes that the
related patches introduce, and record some new cummits that record
them.  This requires your working tree to be clean (no modifications
from the HEAD cummit).

Note: 'but revert' is used to record some new cummits to reverse the
effect of some earlier cummits (often only a faulty one).  If you want to
throw away all uncummitted changes in your working directory, you
should see linkbut:but-reset[1], particularly the `--hard` option.  If
you want to extract specific files as they were in another cummit, you
should see linkbut:but-restore[1], specifically the `--source`
option. Take care with these alternatives as
both will discard uncummitted changes in your working directory.

See "Reset, restore and revert" in linkbut:but[1] for the differences
between the three commands.

OPTIONS
-------
<cummit>...::
	cummits to revert.
	For a more complete list of ways to spell cummit names, see
	linkbut:butrevisions[7].
	Sets of cummits can also be given but no traversal is done by
	default, see linkbut:but-rev-list[1] and its `--no-walk`
	option.

-e::
--edit::
	With this option, 'but revert' will let you edit the cummit
	message prior to cummitting the revert. This is the default if
	you run the command from a terminal.

-m parent-number::
--mainline parent-number::
	Usually you cannot revert a merge because you do not know which
	side of the merge should be considered the mainline.  This
	option specifies the parent number (starting from 1) of
	the mainline and allows revert to reverse the change
	relative to the specified parent.
+
Reverting a merge cummit declares that you will never want the tree changes
brought in by the merge.  As a result, later merges will only bring in tree
changes introduced by cummits that are not ancestors of the previously
reverted merge.  This may or may not be what you want.
+
See the link:howto/revert-a-faulty-merge.html[revert-a-faulty-merge How-To] for
more details.

--no-edit::
	With this option, 'but revert' will not start the cummit
	message editor.

--cleanup=<mode>::
	This option determines how the cummit message will be cleaned up before
	being passed on to the cummit machinery. See linkbut:but-cummit[1] for more
	details. In particular, if the '<mode>' is given a value of `scissors`,
	scissors will be appended to `MERGE_MSG` before being passed on in the case
	of a conflict.

-n::
--no-cummit::
	Usually the command automatically creates some cummits with
	cummit log messages stating which cummits were
	reverted.  This flag applies the changes necessary
	to revert the named cummits to your working tree
	and the index, but does not make the cummits.  In addition,
	when this option is used, your index does not have to match
	the HEAD cummit.  The revert is done against the
	beginning state of your index.
+
This is useful when reverting more than one cummits'
effect to your index in a row.

-S[<keyid>]::
--gpg-sign[=<keyid>]::
--no-gpg-sign::
	GPG-sign cummits. The `keyid` argument is optional and
	defaults to the cummitter identity; if specified, it must be
	stuck to the option without a space. `--no-gpg-sign` is useful to
	countermand both `cummit.gpgSign` configuration variable, and
	earlier `--gpg-sign`.

-s::
--signoff::
	Add a `Signed-off-by` trailer at the end of the cummit message.
	See the signoff option in linkbut:but-cummit[1] for more information.

--strategy=<strategy>::
	Use the given merge strategy.  Should only be used once.
	See the MERGE STRATEGIES section in linkbut:but-merge[1]
	for details.

-X<option>::
--strategy-option=<option>::
	Pass the merge strategy-specific option through to the
	merge strategy.  See linkbut:but-merge[1] for details.

--rerere-autoupdate::
--no-rerere-autoupdate::
	Allow the rerere mechanism to update the index with the
	result of auto-conflict resolution if possible.

SEQUENCER SUBCOMMANDS
---------------------
include::sequencer.txt[]

EXAMPLES
--------
`but revert HEAD~3`::

	Revert the changes specified by the fourth last cummit in HEAD
	and create a new cummit with the reverted changes.

`but revert -n master~5..master~2`::

	Revert the changes done by cummits from the fifth last cummit
	in master (included) to the third last cummit in master
	(included), but do not create any cummit with the reverted
	changes. The revert only modifies the working tree and the
	index.

SEE ALSO
--------
linkbut:but-cherry-pick[1]

GIT
---
Part of the linkbut:but[1] suite
