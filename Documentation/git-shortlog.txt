but-shortlog(1)
===============

NAME
----
but-shortlog - Summarize 'but log' output

SYNOPSIS
--------
[verse]
'but shortlog' [<options>] [<revision-range>] [[--] <path>...]
but log --pretty=short | 'but shortlog' [<options>]

DESCRIPTION
-----------
Summarizes 'but log' output in a format suitable for inclusion
in release announcements. Each cummit will be grouped by author and title.

Additionally, "[PATCH]" will be stripped from the cummit description.

If no revisions are passed on the command line and either standard input
is not a terminal or there is no current branch, 'but shortlog' will
output a summary of the log read from standard input, without
reference to the current repository.

OPTIONS
-------

-n::
--numbered::
	Sort output according to the number of cummits per author instead
	of author alphabetic order.

-s::
--summary::
	Suppress cummit description and provide a cummit count summary only.

-e::
--email::
	Show the email address of each author.

--format[=<format>]::
	Instead of the cummit subject, use some other information to
	describe each cummit.  '<format>' can be any string accepted
	by the `--format` option of 'but log', such as '* [%h] %s'.
	(See the "PRETTY FORMATS" section of linkbut:but-log[1].)

	Each pretty-printed cummit will be rewrapped before it is shown.

--group=<type>::
	Group cummits based on `<type>`. If no `--group` option is
	specified, the default is `author`. `<type>` is one of:
+
--
 - `author`, cummits are grouped by author
 - `cummitter`, cummits are grouped by cummitter (the same as `-c`)
 - `trailer:<field>`, the `<field>` is interpreted as a case-insensitive
   cummit message trailer (see linkbut:but-interpret-trailers[1]). For
   example, if your project uses `Reviewed-by` trailers, you might want
   to see who has been reviewing with
   `but shortlog -ns --group=trailer:reviewed-by`.
+
Note that cummits that do not include the trailer will not be counted.
Likewise, cummits with multiple trailers (e.g., multiple signoffs) may
be counted more than once (but only once per unique trailer value in
that cummit).
+
Shortlog will attempt to parse each trailer value as a `name <email>`
identity. If successful, the mailmap is applied and the email is omitted
unless the `--email` option is specified. If the value cannot be parsed
as an identity, it will be taken literally and completely.
--
+
If `--group` is specified multiple times, cummits are counted under each
value (but again, only once per unique value in that cummit). For
example, `but shortlog --group=author --group=trailer:co-authored-by`
counts both authors and co-authors.

-c::
--cummitter::
	This is an alias for `--group=cummitter`.

-w[<width>[,<indent1>[,<indent2>]]]::
	Linewrap the output by wrapping each line at `width`.  The first
	line of each entry is indented by `indent1` spaces, and the second
	and subsequent lines are indented by `indent2` spaces. `width`,
	`indent1`, and `indent2` default to 76, 6 and 9 respectively.
+
If width is `0` (zero) then indent the lines of the output without wrapping
them.

<revision-range>::
	Show only cummits in the specified revision range.  When no
	<revision-range> is specified, it defaults to `HEAD` (i.e. the
	whole history leading to the current cummit).  `origin..HEAD`
	specifies all the cummits reachable from the current cummit
	(i.e. `HEAD`), but not from `origin`. For a complete list of
	ways to spell <revision-range>, see the "Specifying Ranges"
	section of linkbut:butrevisions[7].

[--] <path>...::
	Consider only cummits that are enough to explain how the files
	that match the specified paths came to be.
+
Paths may need to be prefixed with `--` to separate them from
options or the revision range, when confusion arises.

:but-shortlog: 1
include::rev-list-options.txt[]

MAPPING AUTHORS
---------------

See linkbut:butmailmap[5].

Note that if `but shortlog` is run outside of a repository (to process
log contents on standard input), it will look for a `.mailmap` file in
the current directory.

GIT
---
Part of the linkbut:but[1] suite
