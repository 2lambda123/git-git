but-show-branch(1)
==================

NAME
----
but-show-branch - Show branches and their cummits

SYNOPSIS
--------
[verse]
'but show-branch' [-a|--all] [-r|--remotes] [--topo-order | --date-order]
		[--current] [--color[=<when>] | --no-color] [--sparse]
		[--more=<n> | --list | --independent | --merge-base]
		[--no-name | --sha1-name] [--topics]
		[(<rev> | <glob>)...]
'but show-branch' (-g|--reflog)[=<n>[,<base>]] [--list] [<ref>]

DESCRIPTION
-----------

Shows the cummit ancestry graph starting from the cummits named
with <rev>s or <glob>s (or all refs under refs/heads
and/or refs/tags) semi-visually.

It cannot show more than 29 branches and cummits at a time.

It uses `showbranch.default` multi-valued configuration items if
no <rev> or <glob> is given on the command line.


OPTIONS
-------
<rev>::
	Arbitrary extended SHA-1 expression (see linkbut:butrevisions[7])
	that typically names a branch head or a tag.

<glob>::
	A glob pattern that matches branch or tag names under
	refs/.  For example, if you have many topic
	branches under refs/heads/topic, giving
	`topic/*` would show all of them.

-r::
--remotes::
	Show the remote-tracking branches.

-a::
--all::
	Show both remote-tracking branches and local branches.

--current::
	With this option, the command includes the current
	branch to the list of revs to be shown when it is not
	given on the command line.

--topo-order::
        By default, the branches and their cummits are shown in
        reverse chronological order.  This option makes them
        appear in topological order (i.e., descendant cummits
        are shown before their parents).

--date-order::
	This option is similar to `--topo-order` in the sense that no
	parent comes before all of its children, but otherwise cummits
	are ordered according to their cummit date.

--sparse::
	By default, the output omits merges that are reachable
	from only one tip being shown.  This option makes them
	visible.

--more=<n>::
	Usually the command stops output upon showing the cummit
	that is the common ancestor of all the branches.  This
	flag tells the command to go <n> more common cummits
	beyond that.  When <n> is negative, display only the
	<reference>s given, without showing the cummit ancestry
	tree.

--list::
	Synonym to `--more=-1`

--merge-base::
	Instead of showing the cummit list, determine possible
	merge bases for the specified cummits. All merge bases
	will be contained in all specified cummits. This is
	different from how linkbut:but-merge-base[1] handles
	the case of three or more cummits.

--independent::
	Among the <reference>s given, display only the ones that
	cannot be reached from any other <reference>.

--no-name::
	Do not show naming strings for each cummit.

--sha1-name::
	Instead of naming the cummits using the path to reach
	them from heads (e.g. "master~2" to mean the grandparent
	of "master"), name them with the unique prefix of their
	object names.

--topics::
	Shows only cummits that are NOT on the first branch given.
	This helps track topic branches by hiding any cummit that
	is already in the main line of development.  When given
	"but show-branch --topics master topic1 topic2", this
	will show the revisions given by "but rev-list {caret}master
	topic1 topic2"

-g::
--reflog[=<n>[,<base>]] [<ref>]::
	Shows <n> most recent ref-log entries for the given
	ref.  If <base> is given, <n> entries going back from
	that entry.  <base> can be specified as count or date.
	When no explicit <ref> parameter is given, it defaults to the
	current branch (or `HEAD` if it is detached).

--color[=<when>]::
	Color the status sign (one of these: `*` `!` `+` `-`) of each cummit
	corresponding to the branch it's in.
	The value must be always (the default), never, or auto.

--no-color::
	Turn off colored output, even when the configuration file gives the
	default to color output.
	Same as `--color=never`.

Note that --more, --list, --independent and --merge-base options
are mutually exclusive.


OUTPUT
------
Given N <references>, the first N lines are the one-line
description from their cummit message.  The branch head that is
pointed at by $GIT_DIR/HEAD is prefixed with an asterisk `*`
character while other heads are prefixed with a `!` character.

Following these N lines, one-line log for each cummit is
displayed, indented N places.  If a cummit is on the I-th
branch, the I-th indentation character shows a `+` sign;
otherwise it shows a space.  Merge cummits are denoted by
a `-` sign.  Each cummit shows a short name that
can be used as an extended SHA-1 to name that cummit.

The following example shows three branches, "master", "fixes"
and "mhf":

------------------------------------------------
$ but show-branch master fixes mhf
* [master] Add 'but show-branch'.
 ! [fixes] Introduce "reset type" flag to "but reset"
  ! [mhf] Allow "+remote:local" refspec to cause --force when fetching.
---
  + [mhf] Allow "+remote:local" refspec to cause --force when fetching.
  + [mhf~1] Use but-octopus when pulling more than one heads.
 +  [fixes] Introduce "reset type" flag to "but reset"
  + [mhf~2] "but fetch --force".
  + [mhf~3] Use .but/remote/origin, not .but/branches/origin.
  + [mhf~4] Make "but pull" and "but fetch" default to origin
  + [mhf~5] Infamous 'octopus merge'
  + [mhf~6] Retire but-parse-remote.
  + [mhf~7] Multi-head fetch.
  + [mhf~8] Start adding the $GIT_DIR/remotes/ support.
*++ [master] Add 'but show-branch'.
------------------------------------------------

These three branches all forked from a common cummit, [master],
whose cummit message is "Add \'but show-branch'".
The "fixes" branch adds one cummit "Introduce "reset type" flag to
"but reset"". The "mhf" branch adds many other cummits.
The current branch is "master".


EXAMPLES
--------

If you keep your primary branches immediately under
`refs/heads`, and topic branches in subdirectories of
it, having the following in the configuration file may help:

------------
[showbranch]
	default = --topo-order
	default = heads/*

------------

With this, `but show-branch` without extra parameters would show
only the primary branches.  In addition, if you happen to be on
your topic branch, it is shown as well.

------------
$ but show-branch --reflog="10,1 hour ago" --list master
------------

shows 10 reflog entries going back from the tip as of 1 hour ago.
Without `--list`, the output also shows how these tips are
topologically related with each other.

GIT
---
Part of the linkbut:but[1] suite
