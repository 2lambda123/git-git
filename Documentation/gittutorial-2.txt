buttutorial-2(7)
================

NAME
----
buttutorial-2 - A tutorial introduction to Git: part two

SYNOPSIS
--------
[verse]
but *

DESCRIPTION
-----------

You should work through linkbut:buttutorial[7] before reading this tutorial.

The goal of this tutorial is to introduce two fundamental pieces of
Git's architecture--the object database and the index file--and to
provide the reader with everything necessary to understand the rest
of the Git documentation.

The Git object database
-----------------------

Let's start a new project and create a small amount of history:

------------------------------------------------
$ mkdir test-project
$ cd test-project
$ but init
Initialized empty Git repository in .but/
$ echo 'hello world' > file.txt
$ but add .
$ but cummit -a -m "initial cummit"
[master (root-cummit) 54196cc] initial cummit
 1 file changed, 1 insertion(+)
 create mode 100644 file.txt
$ echo 'hello world!' >file.txt
$ but cummit -a -m "add emphasis"
[master c4d59f3] add emphasis
 1 file changed, 1 insertion(+), 1 deletion(-)
------------------------------------------------

What are the 7 dibuts of hex that Git responded to the cummit with?

We saw in part one of the tutorial that cummits have names like this.
It turns out that every object in the Git history is stored under
a 40-dibut hex name.  That name is the SHA-1 hash of the object's
contents; among other things, this ensures that Git will never store
the same data twice (since identical data is given an identical SHA-1
name), and that the contents of a Git object will never change (since
that would change the object's name as well). The 7 char hex strings
here are simply the abbreviation of such 40 character long strings.
Abbreviations can be used everywhere where the 40 character strings
can be used, so long as they are unambiguous.

It is expected that the content of the cummit object you created while
following the example above generates a different SHA-1 hash than
the one shown above because the cummit object records the time when
it was created and the name of the person performing the cummit.

We can ask Git about this particular object with the `cat-file`
command. Don't copy the 40 hex dibuts from this example but use those
from your own version. Note that you can shorten it to only a few
characters to save yourself typing all 40 hex dibuts:

------------------------------------------------
$ but cat-file -t 54196cc2
cummit
$ but cat-file cummit 54196cc2
tree 92b8b694ffb1675e5975148e1121810081dbdffe
author J. Bruce Fields <bfields@puzzle.fieldses.org> 1143414668 -0500
cummitter J. Bruce Fields <bfields@puzzle.fieldses.org> 1143414668 -0500

initial cummit
------------------------------------------------

A tree can refer to one or more "blob" objects, each corresponding to
a file.  In addition, a tree can also refer to other tree objects,
thus creating a directory hierarchy.  You can examine the contents of
any tree using ls-tree (remember that a long enough initial portion
of the SHA-1 will also work):

------------------------------------------------
$ but ls-tree 92b8b694
100644 blob 3b18e512dba79e4c8300dd08aeb37f8e728b8dad    file.txt
------------------------------------------------

Thus we see that this tree has one file in it.  The SHA-1 hash is a
reference to that file's data:

------------------------------------------------
$ but cat-file -t 3b18e512
blob
------------------------------------------------

A "blob" is just file data, which we can also examine with cat-file:

------------------------------------------------
$ but cat-file blob 3b18e512
hello world
------------------------------------------------

Note that this is the old file data; so the object that Git named in
its response to the initial tree was a tree with a snapshot of the
directory state that was recorded by the first cummit.

All of these objects are stored under their SHA-1 names inside the Git
directory:

------------------------------------------------
$ find .but/objects/
.but/objects/
.but/objects/pack
.but/objects/info
.but/objects/3b
.but/objects/3b/18e512dba79e4c8300dd08aeb37f8e728b8dad
.but/objects/92
.but/objects/92/b8b694ffb1675e5975148e1121810081dbdffe
.but/objects/54
.but/objects/54/196cc2703dc165cbd373a65a4dcf22d50ae7f7
.but/objects/a0
.but/objects/a0/423896973644771497bdc03eb99d5281615b51
.but/objects/d0
.but/objects/d0/492b368b66bdabf2ac1fd8c92b39d3db916e59
.but/objects/c4
.but/objects/c4/d59f390b9cfd4318117afde11d601c1085f241
------------------------------------------------

and the contents of these files is just the compressed data plus a
header identifying their length and their type.  The type is either a
blob, a tree, a cummit, or a tag.

The simplest cummit to find is the HEAD cummit, which we can find
from .but/HEAD:

------------------------------------------------
$ cat .but/HEAD
ref: refs/heads/master
------------------------------------------------

As you can see, this tells us which branch we're currently on, and it
tells us this by naming a file under the .but directory, which itself
contains a SHA-1 name referring to a cummit object, which we can
examine with cat-file:

------------------------------------------------
$ cat .but/refs/heads/master
c4d59f390b9cfd4318117afde11d601c1085f241
$ but cat-file -t c4d59f39
cummit
$ but cat-file cummit c4d59f39
tree d0492b368b66bdabf2ac1fd8c92b39d3db916e59
parent 54196cc2703dc165cbd373a65a4dcf22d50ae7f7
author J. Bruce Fields <bfields@puzzle.fieldses.org> 1143418702 -0500
cummitter J. Bruce Fields <bfields@puzzle.fieldses.org> 1143418702 -0500

add emphasis
------------------------------------------------

The "tree" object here refers to the new state of the tree:

------------------------------------------------
$ but ls-tree d0492b36
100644 blob a0423896973644771497bdc03eb99d5281615b51    file.txt
$ but cat-file blob a0423896
hello world!
------------------------------------------------

and the "parent" object refers to the previous cummit:

------------------------------------------------
$ but cat-file cummit 54196cc2
tree 92b8b694ffb1675e5975148e1121810081dbdffe
author J. Bruce Fields <bfields@puzzle.fieldses.org> 1143414668 -0500
cummitter J. Bruce Fields <bfields@puzzle.fieldses.org> 1143414668 -0500

initial cummit
------------------------------------------------

The tree object is the tree we examined first, and this cummit is
unusual in that it lacks any parent.

Most cummits have only one parent, but it is also common for a cummit
to have multiple parents.   In that case the cummit represents a
merge, with the parent references pointing to the heads of the merged
branches.

Besides blobs, trees, and cummits, the only remaining type of object
is a "tag", which we won't discuss here; refer to linkbut:but-tag[1]
for details.

So now we know how Git uses the object database to represent a
project's history:

  * "cummit" objects refer to "tree" objects representing the
    snapshot of a directory tree at a particular point in the
    history, and refer to "parent" cummits to show how they're
    connected into the project history.
  * "tree" objects represent the state of a single directory,
    associating directory names to "blob" objects containing file
    data and "tree" objects containing subdirectory information.
  * "blob" objects contain file data without any other structure.
  * References to cummit objects at the head of each branch are
    stored in files under .but/refs/heads/.
  * The name of the current branch is stored in .but/HEAD.

Note, by the way, that lots of commands take a tree as an argument.
But as we can see above, a tree can be referred to in many different
ways--by the SHA-1 name for that tree, by the name of a cummit that
refers to the tree, by the name of a branch whose head refers to that
tree, etc.--and most such commands can accept any of these names.

In command synopses, the word "tree-ish" is sometimes used to
designate such an argument.

The index file
--------------

The primary tool we've been using to create cummits is `but-cummit
-a`, which creates a cummit including every change you've made to
your working tree.  But what if you want to cummit changes only to
certain files?  Or only certain changes to certain files?

If we look at the way cummits are created under the cover, we'll see
that there are more flexible ways creating cummits.

Continuing with our test-project, let's modify file.txt again:

------------------------------------------------
$ echo "hello world, again" >>file.txt
------------------------------------------------

but this time instead of immediately making the cummit, let's take an
intermediate step, and ask for diffs along the way to keep track of
what's happening:

------------------------------------------------
$ but diff
--- a/file.txt
+++ b/file.txt
@@ -1 +1,2 @@
 hello world!
+hello world, again
$ but add file.txt
$ but diff
------------------------------------------------

The last diff is empty, but no new cummits have been made, and the
head still doesn't contain the new line:

------------------------------------------------
$ but diff HEAD
diff --but a/file.txt b/file.txt
index a042389..513feba 100644
--- a/file.txt
+++ b/file.txt
@@ -1 +1,2 @@
 hello world!
+hello world, again
------------------------------------------------

So 'but diff' is comparing against something other than the head.
The thing that it's comparing against is actually the index file,
which is stored in .but/index in a binary format, but whose contents
we can examine with ls-files:

------------------------------------------------
$ but ls-files --stage
100644 513feba2e53ebbd2532419ded848ba19de88ba00 0       file.txt
$ but cat-file -t 513feba2
blob
$ but cat-file blob 513feba2
hello world!
hello world, again
------------------------------------------------

So what our 'but add' did was store a new blob and then put
a reference to it in the index file.  If we modify the file again,
we'll see that the new modifications are reflected in the 'but diff'
output:

------------------------------------------------
$ echo 'again?' >>file.txt
$ but diff
index 513feba..ba3da7b 100644
--- a/file.txt
+++ b/file.txt
@@ -1,2 +1,3 @@
 hello world!
 hello world, again
+again?
------------------------------------------------

With the right arguments, 'but diff' can also show us the difference
between the working directory and the last cummit, or between the
index and the last cummit:

------------------------------------------------
$ but diff HEAD
diff --but a/file.txt b/file.txt
index a042389..ba3da7b 100644
--- a/file.txt
+++ b/file.txt
@@ -1 +1,3 @@
 hello world!
+hello world, again
+again?
$ but diff --cached
diff --but a/file.txt b/file.txt
index a042389..513feba 100644
--- a/file.txt
+++ b/file.txt
@@ -1 +1,2 @@
 hello world!
+hello world, again
------------------------------------------------

At any time, we can create a new cummit using 'but cummit' (without
the "-a" option), and verify that the state cummitted only includes the
changes stored in the index file, not the additional change that is
still only in our working tree:

------------------------------------------------
$ but cummit -m "repeat"
$ but diff HEAD
diff --but a/file.txt b/file.txt
index 513feba..ba3da7b 100644
--- a/file.txt
+++ b/file.txt
@@ -1,2 +1,3 @@
 hello world!
 hello world, again
+again?
------------------------------------------------

So by default 'but cummit' uses the index to create the cummit, not
the working tree; the "-a" option to cummit tells it to first update
the index with all changes in the working tree.

Finally, it's worth looking at the effect of 'but add' on the index
file:

------------------------------------------------
$ echo "goodbye, world" >closing.txt
$ but add closing.txt
------------------------------------------------

The effect of the 'but add' was to add one entry to the index file:

------------------------------------------------
$ but ls-files --stage
100644 8b9743b20d4b15be3955fc8d5cd2b09cd2336138 0       closing.txt
100644 513feba2e53ebbd2532419ded848ba19de88ba00 0       file.txt
------------------------------------------------

And, as you can see with cat-file, this new entry refers to the
current contents of the file:

------------------------------------------------
$ but cat-file blob 8b9743b2
goodbye, world
------------------------------------------------

The "status" command is a useful way to get a quick summary of the
situation:

------------------------------------------------
$ but status
On branch master
Changes to be cummitted:
  (use "but restore --staged <file>..." to unstage)

	new file:   closing.txt

Changes not staged for cummit:
  (use "but add <file>..." to update what will be cummitted)
  (use "but restore <file>..." to discard changes in working directory)

	modified:   file.txt

------------------------------------------------

Since the current state of closing.txt is cached in the index file,
it is listed as "Changes to be cummitted".  Since file.txt has
changes in the working directory that aren't reflected in the index,
it is marked "changed but not updated".  At this point, running "but
cummit" would create a cummit that added closing.txt (with its new
contents), but that didn't modify file.txt.

Also, note that a bare `but diff` shows the changes to file.txt, but
not the addition of closing.txt, because the version of closing.txt
in the index file is identical to the one in the working directory.

In addition to being the staging area for new cummits, the index file
is also populated from the object database when checking out a
branch, and is used to hold the trees involved in a merge operation.
See linkbut:butcore-tutorial[7] and the relevant man
pages for details.

What next?
----------

At this point you should know everything necessary to read the man
pages for any of the but commands; one good place to start would be
with the commands mentioned in linkbut:buteveryday[7].  You
should be able to find any unknown jargon in linkbut:butglossary[7].

The link:user-manual.html[Git User's Manual] provides a more
comprehensive introduction to Git.

linkbut:butcvs-migration[7] explains how to
import a CVS repository into Git, and shows how to use Git in a
CVS-like way.

For some interesting examples of Git use, see the
link:howto-index.html[howtos].

For Git developers, linkbut:butcore-tutorial[7] goes
into detail on the lower-level Git mechanisms involved in, for
example, creating a new cummit.

SEE ALSO
--------
linkbut:buttutorial[7],
linkbut:butcvs-migration[7],
linkbut:butcore-tutorial[7],
linkbut:butglossary[7],
linkbut:but-help[1],
linkbut:buteveryday[7],
link:user-manual.html[The Git User's Manual]

BUT
---
Part of the linkbut:but[1] suite
