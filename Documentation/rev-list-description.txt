List cummits that are reachable by following the `parent` links from the
given cummit(s), but exclude cummits that are reachable from the one(s)
given with a '{caret}' in front of them.  The output is given in reverse
chronological order by default.

You can think of this as a set operation. cummits reachable from any of
the cummits given on the command line form a set, and then cummits reachable
from any of the ones given with '{caret}' in front are subtracted from that
set.  The remaining cummits are what comes out in the command's output.
Various other options and paths parameters can be used to further limit the
result.

Thus, the following command:

ifdef::but-rev-list[]
-----------------------------------------------------------------------
$ but rev-list foo bar ^baz
-----------------------------------------------------------------------
endif::but-rev-list[]
ifdef::but-log[]
-----------------------------------------------------------------------
$ but log foo bar ^baz
-----------------------------------------------------------------------
endif::but-log[]

means "list all the cummits which are reachable from 'foo' or 'bar', but
not from 'baz'".

A special notation "'<cummit1>'..'<cummit2>'" can be used as a
short-hand for "^'<cummit1>' '<cummit2>'". For example, either of
the following may be used interchangeably:

ifdef::but-rev-list[]
-----------------------------------------------------------------------
$ but rev-list origin..HEAD
$ but rev-list HEAD ^origin
-----------------------------------------------------------------------
endif::but-rev-list[]
ifdef::but-log[]
-----------------------------------------------------------------------
$ but log origin..HEAD
$ but log HEAD ^origin
-----------------------------------------------------------------------
endif::but-log[]

Another special notation is "'<cummit1>'...'<cummit2>'" which is useful
for merges.  The resulting set of cummits is the symmetric difference
between the two operands.  The following two commands are equivalent:

ifdef::but-rev-list[]
-----------------------------------------------------------------------
$ but rev-list A B --not $(but merge-base --all A B)
$ but rev-list A...B
-----------------------------------------------------------------------
endif::but-rev-list[]
ifdef::but-log[]
-----------------------------------------------------------------------
$ but log A B --not $(but merge-base --all A B)
$ but log A...B
-----------------------------------------------------------------------
endif::but-log[]
