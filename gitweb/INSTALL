BUT web Interface (butweb) Installation
=======================================

First you have to generate butweb.cgi from butweb.perl using
"make butweb", then "make install-butweb" appropriate files
(butweb.cgi, butweb.js, butweb.css, but-logo.png and but-favicon.png)
to their destination. For example if but was (or is) installed with
/usr prefix and butwebdir is /var/www/cgi-bin, you can do

	$ make prefix=/usr butweb                            ;# as yourself
	# make butwebdir=/var/www/cgi-bin install-butweb     ;# as root

Alternatively you can use autoconf generated ./configure script to
set up path to but binaries (via config.mak.autogen), so you can write
instead

	$ make configure                     ;# as yourself
	$ ./configure --prefix=/usr          ;# as yourself
	$ make butweb                        ;# as yourself
	# make butwebdir=/var/www/cgi-bin \
	       install-butweb                ;# as root

The above example assumes that your web server is configured to run
[executable] files in /var/www/cgi-bin/ as server scripts (as CGI
scripts).


Requirements
------------

 - Core but tools
 - Perl 5.8
 - Perl modules: CGI, Encode, Fcntl, File::Find, File::Basename.
 - web server

The following optional Perl modules are required for extra features
 - CGI::Fast and FCGI - for running butweb as FastCGI script
 - HTML::TagCloud - for fancy tag cloud in project list view
 - HTTP::Date or Time::ParseDate - to support If-Modified-Since for feeds


Build time configuration
------------------------

See also "How to configure butweb for your local system" section below.

- There are many configuration variables which affect building of
  butweb.cgi; see "default configuration for butweb" section in main
  (top dir) Makefile, and instructions for building butweb target.

  One of the most important is where to find the but wrapper binary. Gitweb
  tries to find the but wrapper at $(bindir)/but, so you have to set $bindir
  when building butweb.cgi, or $prefix from which $bindir is derived. If
  you build and install butweb together with the rest of the but suite,
  there should be no problems. Otherwise, if but was for example
  installed from a binary package, you have to set $prefix (or $bindir)
  accordingly.

- Another important issue is where are but repositories you want to make
  available to butweb. By default butweb searches for repositories under
  /pub/but; if you want to have projects somewhere else, like /home/but,
  use BUTWEB_PROJECTROOT build configuration variable.

  By default all but repositories under projectroot are visible and
  available to butweb. The list of projects is generated by default by
  scanning the projectroot directory for but repositories. This can be
  changed (configured) as described in "Gitweb repositories" section
  below.

  Note that butweb deals directly with the object database, and does not
  need a working directory; the name of the project is the name of its
  repository object database, usually projectname.but for bare
  repositories. If you want to provide butweb access to non-bare (live)
  repositories, you can make projectname.but a symbolic link under
  projectroot linking to projectname/.but (but it is just
  a suggestion).

- You can control where butweb tries to find its main CSS style file,
  its JavaScript file, its favicon and logo with the BUTWEB_CSS, BUTWEB_JS
  BUTWEB_FAVICON and BUTWEB_LOGO build configuration variables. By default
  butweb tries to find them in the same directory as butweb.cgi script.

- You can optionally generate minified versions of butweb.js and butweb.css
  by defining the JSMIN and CSSMIN build configuration variables. By default
  the non-minified versions will be used. NOTE: if you enable this option,
  substitute butweb.min.js and butweb.min.css for all uses of butweb.js and
  butweb.css in the help files.


How to configure butweb for your local system
---------------------------------------------

You can specify the following configuration variables when building BUT:

 * BUT_BINDIR
   Points where to find the but executable.  You should set it up to
   the place where the but binary was installed (usually /usr/bin) if you
   don't install but from sources together with butweb.  [Default: $(bindir)]
 * BUTWEB_SITENAME
   Shown in the title of all generated pages, defaults to the server name
   (SERVER_NAME CGI environment variable) if not set. [No default]
 * BUTWEB_PROJECTROOT
   The root directory for all projects shown by butweb. Must be set
   correctly for butweb to find repositories to display.  See also
   "Gitweb repositories" in the INSTALL file for butweb.  [Default: /pub/but]
 * BUTWEB_PROJECT_MAXDEPTH
   The filesystem traversing limit for getting the project list; the number
   is taken as depth relative to the projectroot.  It is used when
   BUTWEB_LIST is a directory (or is not set; then project root is used).
   This is meant to speed up project listing on large work trees by limiting
   search depth.  [Default: 2007]
 * BUTWEB_LIST
   Points to a directory to scan for projects (defaults to project root
   if not set / if empty) or to a file with explicit listing of projects
   (together with projects' ownership). See "Generating projects list
   using butweb" in INSTALL file for butweb to find out how to generate
   such file from scan of a directory. [No default, which means use root
   directory for projects]
 * BUTWEB_EXPORT_OK
   Show repository only if this file exists (in repository).  Only
   effective if this variable evaluates to true.  [No default / Not set]
 * BUTWEB_STRICT_EXPORT
   Only allow viewing of repositories also shown on the overview page.
   This for example makes BUTWEB_EXPORT_OK to decide if repository is
   available and not only if it is shown.  If BUTWEB_LIST points to
   file with list of project, only those repositories listed would be
   available for butweb.  [No default]
 * BUTWEB_HOMETEXT
   Points to an .html file which is included on the butweb project
   overview page ('projects_list' view), if it exists.  Relative to
   butweb.cgi script.  [Default: indextext.html]
 * BUTWEB_SITE_HTML_HEAD_STRING
   html snippet to include in the <head> section of each page. [No default]
 * BUTWEB_SITE_HEADER
   Filename of html text to include at top of each page.  Relative to
   butweb.cgi script.  [No default]
 * BUTWEB_SITE_FOOTER
   Filename of html text to include at bottom of each page.  Relative to
   butweb.cgi script.  [No default]
 * BUTWEB_HOME_LINK_STR
   String of the home link on top of all pages, leading to $home_link
   (usually main butweb page, which means projects list).  Used as first
   part of butweb view "breadcrumb trail": <home> / <project> / <view>.
   [Default: projects]
 * BUTWEB_SITENAME
   Name of your site or organization to appear in page titles.  Set it
   to something descriptive for clearer bookmarks etc.  If not set
   (if empty) butweb uses "$SERVER_NAME Git", or "Untitled Git" if
   SERVER_NAME CGI environment variable is not set (e.g. if running
   butweb as standalone script).  [No default]
 * BUTWEB_BASE_URL
   Git base URLs used for URL to where fetch project from, i.e. full
   URL is "$but_base_url/$project".  Shown on projects summary page.
   Repository URL for project can be also configured per repository; this
   takes precedence over URLs composed from base URL and a project name.
   Note that you can setup multiple base URLs (for example one for
   but:// protocol access, another for http:// access) from the butweb
   config file.  [No default]
 * BUTWEB_CSS
   Points to the location where you put butweb.css on your web server
   (or to be more generic, the URI of butweb stylesheet).  Relative to the
   base URI of butweb.  Note that you can setup multiple stylesheets from
   the butweb config file.  [Default: static/butweb.css (or
   static/butweb.min.css if the CSSMIN variable is defined / CSS minifier
   is used)]
 * BUTWEB_JS
   Points to the location where you put butweb.js on your web server
   (or to be more generic URI of JavaScript code used by butweb).
   Relative to base URI of butweb.  [Default: static/butweb.js (or
   static/butweb.min.js if JSMIN build variable is defined / JavaScript
   minifier is used)]
 * CSSMIN, JSMIN
   Invocation of a CSS minifier or a JavaScript minifier, respectively,
   working as a filter (source on standard input, minified result on
   standard output).  If set, it is used to generate a minified version of
   'static/butweb.css' or 'static/butweb.js', respectively.  *Note* that
   minified files would have *.min.css and *.min.js extension, which is
   important if you also set BUTWEB_CSS and/or BUTWEB_JS.  [No default]
 * BUTWEB_LOGO
   Points to the location where you put but-logo.png on your web server
   (or to be more generic URI of logo, 72x27 size, displayed in top right
   corner of each butweb page, and used as logo for Atom feed).  Relative
   to base URI of butweb.  [Default: static/but-logo.png]
 * BUTWEB_FAVICON
   Points to the location where you put but-favicon.png on your web server
   (or to be more generic URI of favicon, assumed to be image/png type;
   web browsers that support favicons (website icons) may display them
   in the browser's URL bar and next to site name in bookmarks).  Relative
   to base URI of butweb.  [Default: static/but-favicon.png]
 * BUTWEB_CONFIG
   This Perl file will be loaded using 'do' and can be used to override any
   of the options above as well as some other options -- see the "Runtime
   butweb configuration" section below, and top of 'butweb.cgi' for their
   full list and description.  If the environment variable BUTWEB_CONFIG
   is set when butweb.cgi is executed, then the file specified in the
   environment variable will be loaded instead of the file specified
   when butweb.cgi was created.  [Default: butweb_config.perl]
 * BUTWEB_CONFIG_SYSTEM
   This Perl file will be loaded using 'do' as a fallback if BUTWEB_CONFIG
   does not exist.  If the environment variable BUTWEB_CONFIG_SYSTEM is set
   when butweb.cgi is executed, then the file specified in the environment
   variable will be loaded instead of the file specified when butweb.cgi was
   created.  [Default: /etc/butweb.conf]
 * HIGHLIGHT_BIN
   Path to the highlight executable to use (must be the one from
   http://www.andre-simon.de due to assumptions about parameters and output).
   Useful if highlight is not installed on your webserver's PATH.
   [Default: highlight]

Build example
~~~~~~~~~~~~~

- To install butweb to /var/www/cgi-bin/butweb/, when but wrapper
  is installed at /usr/local/bin/but, the repositories (projects)
  we want to display are under /home/local/scm, and you do not use
  minifiers, you can do

	make BUTWEB_PROJECTROOT="/home/local/scm" \
	     BUTWEB_JS="butweb/static/butweb.js" \
	     BUTWEB_CSS="butweb/static/butweb.css" \
	     BUTWEB_LOGO="butweb/static/but-logo.png" \
	     BUTWEB_FAVICON="butweb/static/but-favicon.png" \
	     bindir=/usr/local/bin \
	     butweb

	make butwebdir=/var/www/cgi-bin/butweb install-butweb


Gitweb config file
------------------

See also "Runtime butweb configuration" section in README file
for butweb (in butweb/README), and butweb.conf(5) manpage.

- You can configure butweb further using the per-instance butweb configuration file;
  by default this is a file named butweb_config.perl in the same place as
  butweb.cgi script. You can control the default place for the config file
  using the BUTWEB_CONFIG build configuration variable, and you can set it
  using the BUTWEB_CONFIG environment variable. If this file does not
  exist, butweb looks for a system-wide configuration file, normally
  /etc/butweb.conf. You can change the default using the
  BUTWEB_CONFIG_SYSTEM build configuration variable, and override it
  through the BUTWEB_CONFIG_SYSTEM environment variable.

  Note that the BUTWEB_CONFIG_SYSTEM system-wide configuration file is
  only used for instances that lack per-instance configuration file.
  You can use BUTWEB_CONFIG_COMMON common system-wide configuration
  file (normally /etc/butweb-common.conf) to keep common default
  settings that apply to all instances.  Settings from per-instance or
  system-wide configuration file override those from common system-wide
  configuration file.

- The butweb config file is a fragment of perl code. You can set variables
  using "our $variable = value"; text from "#" character until the end
  of a line is ignored. See perlsyn(1) for details.

  See the top of butweb.perl file for examples of customizable options.

Config file example
~~~~~~~~~~~~~~~~~~~

To enable blame, pickaxe search, and snapshot support, while allowing
individual projects to turn them off, put the following in your
BUTWEB_CONFIG file:

	$feature{'blame'}{'default'} = [1];
	$feature{'blame'}{'override'} = 1;

	$feature{'pickaxe'}{'default'} = [1];
	$feature{'pickaxe'}{'override'} = 1;

	$feature{'snapshot'}{'default'} = ['zip', 'tgz'];
	$feature{'snapshot'}{'override'} = 1;

If you allow overriding for the snapshot feature, you can specify which
snapshot formats are globally disabled. You can also add any command line
options you want (such as setting the compression level). For instance,
you can disable Zip compressed snapshots and set GZip to run at level 6 by
adding the following lines to your $BUTWEB_CONFIG:

	$known_snapshot_formats{'zip'}{'disabled'} = 1;
	$known_snapshot_formats{'tgz'}{'compressor'} = ['gzip','-6'];


Gitweb repositories
-------------------

By default butweb shows all but repositories under single common repository
root on a local filesystem; see description of BUTWEB_PROJECTROOT build-time
configuration variable above (and also of BUTWEB_LIST).

More advanced usage, like limiting access or visibility of repositories and
managing multiple roots are described on butweb manpage.


Example web server configuration
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

See also "Webserver configuration" and "Advanced web server setup" sections
in butweb(1) manpage.


- Apache2, butweb installed as CGI script,
  under /var/www/cgi-bin/

	ScriptAlias /cgi-bin/ "/var/www/cgi-bin/"

	<Directory "/var/www/cgi-bin">
	    Options Indexes FollowSymlinks ExecCGI
	    AllowOverride None
	    Order allow,deny
	    Allow from all
	</Directory>

- Apache2, butweb installed as mod_perl legacy script,
  under /var/www/perl/

	Alias /perl "/var/www/perl"

	<Directory "/var/www/perl">
	    SetHandler perl-script
	    PerlResponseHandler ModPerl::Registry
	    PerlOptions +ParseHeaders
	    Options Indexes FollowSymlinks +ExecCGI
	    AllowOverride None
	    Order allow,deny
	    Allow from all
	</Directory>
